type Query {
  info: String!
  feed(filter: String, skip: Int, take: Int, orderBy: PostOrderByInput): Feed!
  chapter(translation: String!, b: Int!, c: Int!): Chapter!
  book(b: Int!): KeyEnglish!
  verse(translation: String!, id: Int!): Verse!
}

type Feed {
  posts: [Post!]!
  count: Int!
}

type Mutation {
  post(description: String!): Post!
  comment(description: String!, parentId: Int): Post!
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  updatePost(id: ID!, description: String): Post
  deletePost(id: ID!): Post
  vote(postId: ID!): Vote
  createAvitar(
    name: String!
    color0: String!
    color1: String!
    color2: String!
    color3: String!
    color4: String!
  ): Avitar
}

type Post {
  id: ID!
  description: String!
  postedBy: User
  votes: [Vote!]!
  comments: [Post]
  parentId: Int
  createdAt: String!
  deleted: Boolean!
}

type Comment {
  id: ID!
  description: String!
  postedBy: User
  votes: [Vote!]!
  comments: [Post]
  parentId: Int
  createdAt: String!
  deleted: Boolean!
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  posts: [Post!]!
  #votes: [Vote!]!
  avitar: Avitar!
}

type Subscription {
  newPost: Post
  newVote: Vote
}

type Vote {
  id: ID!
  post: Post!
  user: User!
}

type Avitar {
  id: ID!
  name: String!
  color0: String!
  color1: String!
  color2: String!
  color3: String!
  color4: String!
  user: User
}

input PostOrderByInput {
  description: Sort
  createdAt: Sort
}

enum Sort {
  asc
  desc
}

type BibleVersionKey {
  id: Int!
  table: String!
  abbreviation: String!
  language: String!
  version: String!
  infoText: String!
  infoUrl: String!
  publisher: String!
  copyright: String!
  copyrightInfo: String!
}

type CrossReference {
  id: Int!
  vid: Int!
  r: Int!
  sv: Int!
  ev: Int!
}

type GenericResponse {
  success: Boolean
}

type KeyEnglish {
  b: Int!
  n: String!
}

type Mutation {
  createCrossReference(vid: Int!, r: Int!, sv: Int!, ev: Int!): CrossReference
  updateCrossReference(
    id: Int
    vid: Int
    r: Int
    sv: Int
    ev: Int
  ): CrossReference
  deleteCrossReference(id: Int!): GenericResponse
  createBibleVersionKey(
    table: String!
    abbreviation: String!
    language: String!
    version: String!
    infoText: String!
    infoUrl: String!
    publisher: String!
    copyright: String!
    copyrightInfo: String!
  ): BibleVersionKey
  updateBibleVersionKey(
    id: Int
    table: String
    abbreviation: String
    language: String
    version: String
    infoText: String
    infoUrl: String
    publisher: String
    copyright: String
    copyrightInfo: String
  ): BibleVersionKey
  deleteBibleVersionKey(id: Int!): GenericResponse
  createKeyEnglish(n: String!): KeyEnglish
  updateKeyEnglish(b: Int, n: String): KeyEnglish
  deleteKeyEnglish(b: Int!): GenericResponse
  createTAsv(b: Int!, c: Int!, v: Int!, t: String!): TAsv
  updateTAsv(id: Int, b: Int, c: Int, v: Int, t: String): TAsv
  deleteTAsv(id: Int!): GenericResponse
  createTBbe(b: Int!, c: Int!, v: Int!, t: String!): TBbe
  updateTBbe(id: Int, b: Int, c: Int, v: Int, t: String): TBbe
  deleteTBbe(id: Int!): GenericResponse
  createTDby(b: Int!, c: Int!, v: Int!, t: String!): TDby
  updateTDby(id: Int, b: Int, c: Int, v: Int, t: String): TDby
  deleteTDby(id: Int!): GenericResponse
  createTKjv(b: Int!, c: Int!, v: Int!, t: String!): TKjv
  updateTKjv(id: Int, b: Int, c: Int, v: Int, t: String): TKjv
  deleteTKjv(id: Int!): GenericResponse
  createTWeb(b: Int!, c: Int!, v: Int!, t: String!): TWeb
  updateTWeb(id: Int, b: Int, c: Int, v: Int, t: String): TWeb
  deleteTWeb(id: Int!): GenericResponse
  createTYlt(b: Int!, c: Int!, v: Int!, t: String!): TYlt
  updateTYlt(id: Int, b: Int, c: Int, v: Int, t: String): TYlt
  deleteTYlt(id: Int!): GenericResponse
}

type Verse {
  id: Int!
  b: Int!
  c: Int!
  v: Int!
  t: String!
}

type Chapter {
  c: [Verse!]!
}

type TAsv {
  id: Int!
  b: Int!
  c: Int!
  v: Int!
  t: String!
}

type TBbe {
  id: Int!
  b: Int!
  c: Int!
  v: Int!
  t: String!
}

type TDby {
  id: Int!
  b: Int!
  c: Int!
  v: Int!
  t: String!
}

type TKjv {
  id: Int!
  b: Int!
  c: Int!
  v: Int!
  t: String!
}

type TWeb {
  id: Int!
  b: Int!
  c: Int!
  v: Int!
  t: String!
}

type TYlt {
  id: Int!
  b: Int!
  c: Int!
  v: Int!
  t: String!
}
