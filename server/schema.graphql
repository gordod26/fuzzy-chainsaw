type BibleVersionKey {
  id: Int!
  table: String!
  abbreviation: String!
  language: String!
  version: String!
  infoText: String!
  infoUrl: String!
  publisher: String!
  copyright: String!
  copyrightInfo: String!
}

type CrossReference {
  id: Int!
  vid: Int!
  r: Int!
  sv: Int!
  ev: Int!
}

type GenericResponse {
  success: Boolean
}

type KeyEnglish {
  b: Int!
  n: String!
}

type Mutation {
  createCrossReference(vid: Int!, r: Int!, sv: Int!, ev: Int!): CrossReference
  updateCrossReference(
    id: Int
    vid: Int
    r: Int
    sv: Int
    ev: Int
  ): CrossReference
  deleteCrossReference(id: Int!): GenericResponse
  createBibleVersionKey(
    table: String!
    abbreviation: String!
    language: String!
    version: String!
    infoText: String!
    infoUrl: String!
    publisher: String!
    copyright: String!
    copyrightInfo: String!
  ): BibleVersionKey
  updateBibleVersionKey(
    id: Int
    table: String
    abbreviation: String
    language: String
    version: String
    infoText: String
    infoUrl: String
    publisher: String
    copyright: String
    copyrightInfo: String
  ): BibleVersionKey
  deleteBibleVersionKey(id: Int!): GenericResponse
  createKeyEnglish(n: String!): KeyEnglish
  updateKeyEnglish(b: Int, n: String): KeyEnglish
  deleteKeyEnglish(b: Int!): GenericResponse
  createTAsv(b: Int!, c: Int!, v: Int!, t: String!): TAsv
  updateTAsv(id: Int, b: Int, c: Int, v: Int, t: String): TAsv
  deleteTAsv(id: Int!): GenericResponse
  createTBbe(b: Int!, c: Int!, v: Int!, t: String!): TBbe
  updateTBbe(id: Int, b: Int, c: Int, v: Int, t: String): TBbe
  deleteTBbe(id: Int!): GenericResponse
  createTDby(b: Int!, c: Int!, v: Int!, t: String!): TDby
  updateTDby(id: Int, b: Int, c: Int, v: Int, t: String): TDby
  deleteTDby(id: Int!): GenericResponse
  createTKjv(b: Int!, c: Int!, v: Int!, t: String!): TKjv
  updateTKjv(id: Int, b: Int, c: Int, v: Int, t: String): TKjv
  deleteTKjv(id: Int!): GenericResponse
  createTWeb(b: Int!, c: Int!, v: Int!, t: String!): TWeb
  updateTWeb(id: Int, b: Int, c: Int, v: Int, t: String): TWeb
  deleteTWeb(id: Int!): GenericResponse
  createTYlt(b: Int!, c: Int!, v: Int!, t: String!): TYlt
  updateTYlt(id: Int, b: Int, c: Int, v: Int, t: String): TYlt
  deleteTYlt(id: Int!): GenericResponse
}

type TAsv {
  id: Int!
  b: Int!
  c: Int!
  v: Int!
  t: String!
}

type TBbe {
  id: Int!
  b: Int!
  c: Int!
  v: Int!
  t: String!
}

type TDby {
  id: Int!
  b: Int!
  c: Int!
  v: Int!
  t: String!
}

type TKjv {
  id: Int!
  b: Int!
  c: Int!
  v: Int!
  t: String!
}

type TWeb {
  id: Int!
  b: Int!
  c: Int!
  v: Int!
  t: String!
}

type TYlt {
  id: Int!
  b: Int!
  c: Int!
  v: Int!
  t: String!
}
